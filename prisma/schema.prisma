generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String // User's first name
  lastName   String // User's last name
  email      String     @unique
  password   String
  role       UserRole
  profilePic String?    @default("") // URL to profile picture
  otp        String?
  OtpExpires DateTime? @default(now()) 
  isVerified  Boolean   @default(false)

  bio        String? // Short user bio
  posts      Post[]     @relation("UserPosts")
  likes      Like[]     @relation("UserLikes")
  comments   Comment[]  @relation("UserComments")
  favorites  Favorite[] @relation("UserFavorites")
  followers  Follower[] @relation("FollowedUsers")
  following  Follower[] @relation("FollowingUsers")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("users")
}

model Post {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  caption     String?
  contentType ContentType
  text        String?
  video       String?
  photo       String?
  userId      String      @db.ObjectId
  user        User        @relation("UserPosts", fields: [userId], references: [id])
  likes       Like[]      @relation("PostLikes")
  comments    Comment[]   @relation("PostComments")
  favorites   Favorite[]  @relation("PostFavorites")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("posts")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation("PostLikes", fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@map("likes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String   @db.ObjectId
  user      User     @relation("UserComments", fields: [userId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation("PostComments", fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@map("comments")
}

model Follower {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  follower    User     @relation("FollowingUsers", fields: [followerId], references: [id])
  followingId String   @db.ObjectId
  following   User     @relation("FollowedUsers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@map("followers")
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation("UserFavorites", fields: [userId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation("PostFavorites", fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@map("favorites")
}

enum ContentType {
  TEXT
  PHOTO
  VIDEO
}

enum UserRole {
  ADMIN
  TEACHER
  SUPER_ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}
