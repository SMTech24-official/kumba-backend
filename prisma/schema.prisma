generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String // User's first name
  lastName   String // User's last name
  email      String      @unique
  password   String?
  role       UserRole
  profilePic String?     @default("") // URL to profile picture
  bannerPic  String?     @default("") // URL to
  summary    String?
  birthday   String?
  skills     Json?
  phone      String?
  address    String?
  otp        String?
  OtpExpires DateTime?   @default(now())
  isVerified Boolean     @default(false)
  posts      Post[]      @relation("UserPosts")
  likes      Like[]      @relation("UserLikes")
  comments   Comment[]   @relation("UserComments")
  followers  Follower[]  @relation("FollowedUsers")
  following  Follower[]  @relation("FollowingUsers")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Award      Award[]
  Education  Education[]
  Share      Share[]
  Favorite   Favorite[]
  Cart       Cart[]
  Review     Review[]
  Payment    Payment[]
  Order      Order[]

  @@map("users")
}

model Award {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  givenBy     String
  description String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Awards")
}

model Education {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  instituteName String
  department    String
  session       String
  description   String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("Educations")
}

model Post {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  text       String?
  videos     Json? // Array of objects like [{url: ""}]
  photos     Json?
  shareCount Int?       @default(0)
  likeCount  Int?       @default(0)
  userId     String     @db.ObjectId
  user       User       @relation("UserPosts", fields: [userId], references: [id])
  likes      Like[]     @relation("PostLikes")
  comments   Comment[]  @relation("PostComments")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Share      Share[]
  Favorite   Favorite[]

  @@map("posts")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation("PostLikes", fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@map("likes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  rating    Int
  userId    String   @db.ObjectId
  user      User     @relation("UserComments", fields: [userId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation("PostComments", fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@map("comments")
}

model Follower {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String        @db.ObjectId
  follower    User          @relation("FollowingUsers", fields: [followerId], references: [id])
  followingId String        @db.ObjectId
  following   User          @relation("FollowedUsers", fields: [followingId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      RequestStatus @default(PENDING)

  @@map("followers")
}

model Share {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Shares")
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Favorites")
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  images         Json
  description    String
  packageDetails String
  price          Float
  regularPrice   Float
  quantity       Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  isDeleted      Boolean  @default(false)

  Review    Review[]
  Cart      Cart[]
  Payment   Payment[]
  OrderItem OrderItem[]

  @@map("Products")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  rating    Int
  comment   String
  User      User     @relation(fields: [userId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Reviews")
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Carts")
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  productId       String   @db.ObjectId
  amount          Int
  currency        String
  status          String
  paymentIntentId String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  product         Product  @relation(fields: [productId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

enum ContentType {
  TEXT
  PHOTO
  VIDEO
}

enum UserRole {
  ADMIN
  TEACHER
  SUPER_ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  status    String      @default("Pending")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}
